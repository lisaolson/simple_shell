PERROR(3)                                     Linux Programmer's Manual                                     PERROR(3)



NNAAMMEE
       perror - print a system error message

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddiioo..hh>>

       vvooiidd ppeerrrroorr((ccoonnsstt cchhaarr **_s));;

       ##iinncclluuddee <<eerrrrnnoo..hh>>

       ccoonnsstt cchhaarr **_s_y_s___e_r_r_l_i_s_t[[]];;
       iinntt _s_y_s___n_e_r_r;;
       iinntt _e_r_r_n_o;;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       _s_y_s___e_r_r_l_i_s_t, _s_y_s___n_e_r_r: _BSD_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  routine  ppeerrrroorr()  produces a message on the standard error output, describing the last error encountered
       during a call to a system or library function.  First (if _s is not NULL and _*_s is not a null byte ('\0'))  the
       argument string _s is printed, followed by a colon and a blank.  Then the message and a new-line.

       To  be  of most use, the argument string should include the name of the function that incurred the error.  The
       error number is taken from the external variable _e_r_r_n_o, which is set when errors occur but  not  cleared  when
       successful calls are made.

       The  global error list _s_y_s___e_r_r_l_i_s_t[] indexed by _e_r_r_n_o can be used to obtain the error message without the new‐
       line.  The largest message number provided in the table is _s_y_s___n_e_r_r-1.  Be  careful  when  directly  accessing
       this  list  because  new  error  values may not have been added to _s_y_s___e_r_r_l_i_s_t[].  The use of _s_y_s___e_r_r_l_i_s_t[] is
       nowadays deprecated.

       When a system call fails, it usually returns -1 and sets the variable _e_r_r_n_o to a value  describing  what  went
       wrong.   (These values can be found in _<_e_r_r_n_o_._h_>.)  Many library functions do likewise.  The function ppeerrrroorr()
       serves to translate this error code into human-readable form.  Note that _e_r_r_n_o is undefined after a successful
       library  call: this call may well change this variable, even though it succeeds, for example because it inter‐
       nally used some other library function that failed.  Thus, if a failing call is not immediately followed by  a
       call to ppeerrrroorr(), the value of _e_r_r_n_o should be saved.

CCOONNFFOORRMMIINNGG TTOO
       The  function  ppeerrrroorr()  and the external _e_r_r_n_o (see eerrrrnnoo(3)) conform to C89, C99, 4.3BSD, POSIX.1-2001.  The
       externals _s_y_s___n_e_r_r and _s_y_s___e_r_r_l_i_s_t conform to BSD.

NNOOTTEESS
       The externals _s_y_s___n_e_r_r and _s_y_s___e_r_r_l_i_s_t are defined by glibc, but in _<_s_t_d_i_o_._h_>.

SSEEEE AALLSSOO
       eerrrr(3), eerrrrnnoo(3), eerrrroorr(3), ssttrreerrrroorr(3)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, and  informa‐
       tion about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.



                                                      2012-04-17                                            PERROR(3)
